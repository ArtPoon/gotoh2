import unittest
from gotoh2.aligner import Aligner


class TestAligner(unittest.TestCase):
    def setUp(self):
        self.g2 = Aligner()
        self.g2.gap_open_penalty = 5


class TestAlignerSimpleGlobal(TestAligner):
    def runTest(self):
        aligned_ref, aligned_query, aligned_score = self.g2.align('ACGT', 'ACT')
        expected = 'ACGT'
        self.assertEqual(expected, aligned_ref)
        expected = 'AC-T'
        self.assertEqual(expected, aligned_query)
        expected = 5 + 5 + (-5 - 1) + 5
        self.assertEqual(expected, aligned_score)


class TestAlignerLongerGlobal(TestAligner):
    def runTest(self):
        aref, aquery, ascore = self.g2.align('ACGTACGTACGTACGT', 'ACGTACGTACTACGT')
        expected = 'ACGTACGTAC-TACGT'
        self.assertEqual(expected, aquery)
        # TODO: run progressively longer sequences


class TestAlignerSimpleLocal(TestAligner):
    def runTest(self):
        self.g2.is_global = False
        aligned_ref, aligned_query, aligned_score = self.g2.align('TACGTA', 'ACGT')
        expected = 'TACGTA'
        self.assertEqual(expected, aligned_ref)
        expected = '-ACGT-'
        self.assertEqual(expected, aligned_query)
        expected = 20
        self.assertEqual(expected, aligned_score)


class TestFlouri(TestAligner):
    """
    Evaluate test cases described in Flouri et al. bioRxiv 031500
    """

    def test_NWalign_example(self):
        self.g2.is_global = True
        self.g2.gap_open_penalty = 10
        self.g2.gap_extend_penalty = 1
        self.g2.set_model('NWALIGN')

        a1, a2, result = self.g2.align('GGTGTGA', 'TCGCGT')
        expected = -3
        self.assertEqual(expected, result)

    def test_Biopp_example1(self):
        self.g2.is_global = True
        self.g2.gap_open_penalty = 5
        self.g2.gap_extend_penalty = 1
        self.g2.set_model('Biopp')  # 0 match, -1 mismatch

        a1, a2, score = self.g2.align('AAAGGG', 'TTAAAAGGGGTT')
        expected = -15
        # there appear to be multiple solutions with same score
        self.assertEqual(expected, score)

    def test_Biopp_example2(self):
        self.g2.is_global = True
        self.g2.gap_open_penalty = 40
        self.g2.gap_extend_penalty = 1
        self.g2.set_model('Biopp2')  # +10 match, -30 mismatch
        print(self.g2)
        a1, a2, score = self.g2.align('AAATTTGC', 'CGCCTTAC')
        print a1, a2, score


class TestHIV(TestAligner):
    def setUp(self):
        self.g2 = Aligner()

        # standard HIV-1 subtype B reference sequence, RT-encoding region
        self.hxb2_rt = "CCCATTAGCCCTATTGAGACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGCCCAAAAGTTAAACAATGG" \
                       "CCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATTTGTACAGAGATGGAAAAGGAAGGGAAAATTTCA" \
                       "AAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTTGCCATAAAGAAAAAAGACAGTACTAAATGGAGA" \
                       "AAATTAGTAGATTTCAGAGAACTTAATAAGAGAACTCAAGACTTCTGGGAAGTTCAATTAGGAATACCACAT" \
                       "CCCGCAGGGTTAAAAAAGAAAAAATCAGTAACAGTACTGGATGTGGGTGATGCATATTTTTCAGTTCCCTTA" \
                       "GATGAAGACTTCAGGAAGTATACTGCATTTACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATAT" \
                       "CAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTCCAAAGTAGCATGACAAAAATCTTA" \
                       "GAGCCTTTTAGAAAACAAAATCCAGACATAGTTATCTATCAATACATGGATGATTTGTATGTAGGATCTGAC" \
                       "TTAGAAATAGGGCAGCATAGAACAAAAATAGAGGAGCTGAGACAACATCTGTTGAGGTGGGGACTTACCACA" \
                       "CCAGACAAAAAACATCAGAAAGAACCTCCATTCCTTTGGATGGGTTATGAACTCCATCCTGATAAATGGACA" \
                       "GTACAGCCTATAGTGCTGCCAGAAAAAGACAGCTGGACTGTCAATGACATACAGAAGTTAGTGGGGAAATTG" \
                       "AATTGGGCAAGTCAGATTTACCCAGGGATTAAAGTAAGGCAATTATGTAAACTCCTTAGAGGAACCAAAGCA" \
                       "CTAACAGAAGTAATACCACTAACAGAAGAAGCAGAGCTAGAACTGGCAGAAAACAGAGAGATTCTAAAAGAA" \
                       "CCAGTACATGGAGTGTATTATGACCCATCAAAAGACTTAATAGCAGAAATACAGAAGCAGGGGCAAGGCCAA" \
                       "TGGACATATCAAATTTATCAAGAGCCATTTAAAAATCTGAAAACAGGAAAATATGCAAGAATGAGGGGTGCC" \
                       "CACACTAATGATGTAAAACAATTAACAGAGGCAGTGCAAAAAATAACCACAGAAAGCATAGTAATATGGGGA" \
                       "AAGACTCCTAAATTTAAACTGCCCATACAAAAGGAAACATGGGAAACATGGTGGACAGAGTATTGGCAAGCC" \
                       "ACCTGGATTCCTGAGTGGGAGTTTGTTAATACCCCTCCCTTAGTGAAATTATGGTACCAGTTAGAGAAAGAA" \
                       "CCCATAGTAGGAGCAGAAACCTTC"
        # standard HIV-1 reference strain, pol-encoding region
        self.nl43 = "TTTTTTAGGGAAGATCTGGCCTTCCCACAAGGGAAGGCCAGGGAATTTTCTTCAGAGCAGACCAGAGCCAAC" \
                    "AGCCCCACCAGAAGAGAGCTTCAGGTTTGGGGAAGAGACAACAACTCCCTCTCAGAGGCAGGAGCCGATAGA" \
                    "CAAGGAACTGTATCCTTTAGCTTCCCTCAGATCACTCTTTGGCAGCGACCCCTCGTCACAATAAAGATAGGG" \
                    "GGGCAATTAAAGGAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATGAATTTGCCAGGA" \
                    "AGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAGTATGATCAGATACTCATA" \
                    "GAAATCTGCGGACATAAAGCTATAGGTACAGTATTAGTAGGACCTACACCTGTCAACATAATTGGAAGAAAT" \
                    "CTGTTGACTCAGATTGGCTGCACTTTAAATTTTCCCATTAGTCCTATTGAGACTGTACCAGTAAAATTAAAG" \
                    "CCAGGAATGGATGGCCCAAAAGTTAAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATT" \
                    "TGTACAGAAATGGAAAAGGAAGGAAAAATTTCAAAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTT" \
                    "GCCATAAAGAAAAAAGACAGTACTAAATGGAGAAAATTAGTAGATTTCAGAGAACTTAATAAGAGAACTCAA" \
                    "GATTTCTGGGAAGTTCAATTAGGAATACCACATCCTGCAGGGTTAAAACAGAAAAAATCAGTAACAGTACTG" \
                    "GATGTGGGCGATGCATATTTTTCAGTTCCCTTAGATAAAGACTTCAGGAAGTATACTGCATTTACCATACCT" \
                    "AGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCA" \
                    "GCAATATTCCAGTGTAGCATGACAAAAATCTTAGAGCCTTTTAGAAAACAAAATCCAGACGTAGTCATCTAT" \
                    "CAATACATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAACAAAAATAGAGGAACTG" \
                    "AGACAACATCTGTTGAGGTGGGGATTTACCACACCAGACAAAAAACATCAGAAAGAACCTCCATTCCTTTGG" \
                    "ATGGGTTATGAACTCCATCCTGATAAATGGACAGTACAGCCTATAGTGCTGCCAGAAAAGGACAGCTGGACT" \
                    "GTCAATGACATACAGAAATTAGTGGGAAAATTGAATTGGGCAAGTCAGATTTATGCAGGGATTAAAGTAAGG" \
                    "CAATTATGTAAACTTCTTAGGGGAACCAAAGCACTAACAGAAGTAGTACCACTAACAGAAGAAGCAGAGCTA" \
                    "GAACTGGCAGAAAACAGGGAGATTCTAAAAGAACCGGTACATGGAGTGTATTATGACCCATCAAAAGACTTA" \
                    "ATAGCAGAAATACAGAAGCAGGGGCAAGGCCAATGGACATATCAAATTTATCAAGAGCCATTTAGAAATCTG" \
                    "AAAACAGGAAAGTATGCAAGAATGAAGGGTGCCCACACTAATGATGTGAAACAATTAACAGAGGCAGTACAA" \
                    "AAAATAGCCACAGAAAGCATAGTAATATGGGGAAAGACTCCTAAATTTAAATTACCCATACAAAAGGAAACA" \
                    "TGGGAAGCATGGTGGACAGAGTATTGGCAAGCCACCTGGATTCCTGAGTGGGAGTTTGTCAATACCCCTCCC" \
                    "TTAGTGAAGTTATGGTACCAGTTAGAGAAAGAACCCATAATAGGAGCAGAAACTTTCTATGTAGATGGGGCA" \
                    "GCCAATAGGGAAACTAAATTAGGAAAAGCAGGATATGTAACTGACAGAGGAAGACAAAAAGTTGTCCCCCTA" \
                    "ACGGACACAACAAATCAGAAGACTGAGTTACAAGCAATTCATCTAGCTTTGCAGGATTCGGGATTAGAAGTA" \
                    "AACATAGTGACAGACTCACAATATGCATTGGGAATCATTCAAGCACAACCAGATAAGAGTGAATCAGAGTTA" \
                    "GTCAGTCAAATAATAGAGCAGTTAATAAAAAAGGAAAAAGTCTACCTGGCATGGGTACCAGCACACAAAGGA" \
                    "ATTGGAGGAAATGAACAAGTAGATAAATTGGTCAGTGCTGGAATCAGGAAAGTACTATTTTTAGATGGAATA" \
                    "GATAAGGCCCAAGAAGAACATGAGAAATATCACAGTAATTGGAGAGCAATGGCTAGTGATTTTAACCTACCA" \
                    "CCTGTAGTAGCAAAAGAAATAGTAGCCAGCTGTGATAAATGTCAGCTAAAAGGGGAAGCCATGCATGGACAA" \
                    "GTAGACTGTAGCCCAGGAATATGGCAGCTAGATTGTACACATTTAGAAGGAAAAGTTATCTTGGTGGCAGTT" \
                    "CATGTAGCCAGTGGATATATAGAAGCAGAAGTAATTCCAGCAGAGACAGGGCAAGAAACAGCATACTTCCTC" \
                    "TTAAAATTAGCAGGAAGATGGCCAGTAAAAACAGTACATACAGACAATGGCAGCAATTTCACCAGTACTACA" \
                    "GTTAAGGCCGCCTGTTGGTGGGCGGGAATCAAGCAGGAATTTGGCATTCCCTACAATCCCCAAAGTCAAGGA" \
                    "GTAATAGAATCTATGAATAAAGAATTAAAGAAAATTATAGGACAGGTAAGAGATCAGGCTGAACATCTTAAG" \
                    "ACAGCAGTACAAATGGCAGTATTCATCCACAATTTTAAAAGAAAAGGGGGGATTGGGGGGTACAGTGCAGGG" \
                    "GAAAGAATAGTAGACATAATAGCAACAGACATACAAACTAAAGAATTACAAAAACAAATTACAAAAATTCAA" \
                    "AATTTTCGGGTTTATTACAGGGACAGCAGAGATCCAGTTTGGAAAGGACCAGCAAAGCTCCTCTGGAAAGGT" \
                    "GAAGGGGCAGTAGTAATACAAGATAATAGTGACATAAAAGTAGTGCCAAGAAGAAAAGCAAAGATCATCAGG" \
                    "GATTATGGAAAACAGATGGCAGGTGATGATTGTGTGGCAAGTAGACAGGATGAGGATTAA"

    def test_pol(self):
        with open('HXB2-RT.txt', 'rU') as f:
            s1 = f.readline()
        with open('NL4-3.txt', 'rU') as f:
            s2 = f.readline()
        self.g2.is_global = True
        _ = self.g2.align(s1, s2)

        self.g2.is_global = False
        _ = self.g2.align(s1, s2)


class TestIssues(TestAligner):
    def setUp(self):
        self.g2 = Aligner()

        self.u54771 = "TTTTTAGATGGGATAGATAAGGCTCAAGAAGAACATGAAAGATATCACAGCAATTGGAGAACAATGGCTAGT" \
                      "GATTTTAATTTGCCACCTATAGTAGCAAAGGAAATAGTAACCAACTGTGATAAATGTCAACTAAAAGGGGAA" \
                      "GCTATGCATGGACAAGTAGACTGTAGTCCAGGGATATGGCAATTAGATTGCACACATCTAGAAGGAAAAGTC" \
                      "ATCCTGGTAGCAGTCCACGTGGCCAGTGGATATATAGAAGCAGAAGTTATCCCAGCAGAAACAGGACAGGAG" \
                      "ACAGCATACTTTCTGCTAAAACTAGCAGGAAGATGGCCAGTAAAAGTAATACACACAGACAACGGTAGCAAT" \
                      "TTCACCAGCGCTGCAGTTAAAGCAGCCTGTTGGTGGGCCAATGTCCAACAGGAATTTGGGATCCCCTACAAT" \
                      "CCCCAAAGTCAAGGAGTAGTAGAATCTATGAATAAGGAATTAAAGAAAATCATAGGGCAGGTAAGAGAGCAA" \
                      "GCTGAACACCTTAAAACAGCAGTACAAATGGCAGTATTCATTCACAATTTTAAAAGAAAAGGGGGGATTGGG" \
                      "GGGTACAGTGCAGGGGAAAGAATAATAGACATAATAGCAACAGACATACAAACTAAAGAATTACAAAAACAA" \
                      "ATTACAAAAATTCAAAATTTTCGGGTTTATTACAGGGACAGCAGAGACCCAATTTGGAAAGGACCAGCAAAA" \
                      "CTACTCTGGAAAGGTGAAGGGGCAGTAGTAATACAAGACAATAGTGATATAAAAGTAGTACCAAGAAGAAAA" \
                      "GCAAAGATCATTAGGGATTATGGAAAACAGATGGCAGGTGATGATTGTGTGGCAGGTAGACAGGATGAGGAT"
        self.hxb2_int = "TTTTTAGATGGAATAGATAAGGCCCAAGATGAACATGAGAAATATCACAGTAATTGGAGAGCAATGGCTAGT" \
                        "GATTTTAACCTGCCACCTGTAGTAGCAAAAGAAATAGTAGCCAGCTGTGATAAATGTCAGCTAAAAGGAGAA" \
                        "GCCATGCATGGACAAGTAGACTGTAGTCCAGGAATATGGCAACTAGATTGTACACATTTAGAAGGAAAAGTT" \
                        "ATCCTGGTAGCAGTTCATGTAGCCAGTGGATATATAGAAGCAGAAGTTATTCCAGCAGAAACAGGGCAGGAA" \
                        "ACAGCATATTTTCTTTTAAAATTAGCAGGAAGATGGCCAGTAAAAACAATACATACTGACAATGGCAGCAAT" \
                        "TTCACCGGTGCTACGGTTAGGGCCGCCTGTTGGTGGGCGGGAATCAAGCAGGAATTTGGAATTCCCTACAAT" \
                        "CCCCAAAGTCAAGGAGTAGTAGAATCTATGAATAAAGAATTAAAGAAAATTATAGGACAGGTAAGAGATCAG" \
                        "GCTGAACATCTTAAGACAGCAGTACAAATGGCAGTATTCATCCACAATTTTAAAAGAAAAGGGGGGATTGGG" \
                        "GGGTACAGTGCAGGGGAAAGAATAGTAGACATAATAGCAACAGACATACAAACTAAAGAATTACAAAAACAA" \
                        "ATTACAAAAATTCAAAATTTTCGGGTTTATTACAGGGACAGCAGAAATCCACTTTGGAAAGGACCAGCAAAG" \
                        "CTCCTCTGGAAAGGTGAAGGGGCAGTAGTAATACAAGATAATAGTGACATAAAAGTAGTGCCAAGAAGAAAA" \
                        "GCAAAGATCATTAGGGATTATGGAAAACAGATGGCAGGTGATGATTGTGTGGCAAGTAGACAGGATGAGGAT" \
                        "TAG"

    def test_issue6(self):
        ref = self.hxb2_int[:100]
        query = self.u54771[:100]

        self.g2.is_global = True
        self.g2.gap_open_penalty = 2
        self.g2.align(ref, query)

    def test_issue5(self):
        # this runs ok
        result = self.g2.align('ACGTT', 'ACGT')
        # this reproducibly crashes!
        result = self.g2.align('ACGT', 'ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTT')


if __name__ == '__main__':
    unittest.main()
